import numpy as np
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
import csv

amino_acid_charge = {
    'A': 0, 'C': 0, 'D': -1, 'E': -1, 'F': 0, 'G': 0, 'H': 1, 'I': 0, 'K': 1, 'L': 0,
    'M': 0, 'N': 0, 'P': 0, 'Q': 0, 'R': 1, 'S': 0, 'T': 0, 'V': 0, 'W': 0, 'Y': 0, 'O': 0
}

amino_acid_hydrophobicity = {
    'A': 1.8, 'C': 2.5, 'D': -3.5, 'E': -3.5, 'F': 2.8, 'G': -0.4, 'H': -3.2, 'I': 4.5, 'K': -3.9, 'L': 3.8,
    'M': 1.9, 'N': -3.5, 'P': -1.6, 'Q': -3.5, 'R': -4.5, 'S': -0.8, 'T': -0.7, 'V': 4.2, 'W': -0.9, 'Y': -1.3, 'O': 0
}


amino_acid_bioactivity = {
    'A': 0.5, 'C': 0.7, 'D': 0.2, 'E': 0.3, 'F': 0.9, 'G': 0.4, 'H': 0.6, 'I': 0.8, 'K': 0.1, 'L': 0.8,
    'M': 0.7, 'N': 0.3, 'P': 0.5, 'Q': 0.3, 'R': 0.2, 'S': 0.4, 'T': 0.5, 'V': 0.9, 'W': 1.0, 'Y': 0.8, 'O': 0.6
}

def sequence_to_features(sequence, max_length):
    amino_acids = 'ACDEFGHIKLMNPQRSTVWYO'
    amino_acid_to_index = {acid: i for i, acid in enumerate(amino_acids)}

    one_hot = np.zeros((max_length, len(amino_acids)))
    charge_features = np.zeros(max_length)
    hydrophobicity_features = np.zeros(max_length)
    bioactivity_features = np.zeros(max_length)

    for i, aa in enumerate(sequence):
        if aa in amino_acid_to_index:
            one_hot[i, amino_acid_to_index[aa]] = 1
            charge_features[i] = amino_acid_charge[aa]
            hydrophobicity_features[i] = amino_acid_hydrophobicity[aa]
            bioactivity_features[i] = amino_acid_bioactivity[aa]
    return np.concatenate([one_hot.flatten(), charge_features, hydrophobicity_features, bioactivity_features])

sequences = []
with open('peptide_library_fish.txt', 'r') as file:
    current_sequence = ''
    for line in file:
        line = line.strip()
        if line.startswith('>'):
            if current_sequence:
                sequences.append(current_sequence)
                current_sequence = ''
        else:
            current_sequence += line
    if current_sequence:
        sequences.append(current_sequence)

max_sequence_length = max(len(seq) for seq in sequences)
feature_vectors = [sequence_to_features(seq, max_sequence_length) for seq in sequences]

X = np.array(feature_vectors)
print(f"X.shape = {X.shape}")

pca = PCA(n_components=2)
embedded_sequences_pca = pca.fit_transform(X)

kmeans = KMeans(n_clusters=3, random_state=42)
clusters = kmeans.fit_predict(embedded_sequences_pca)

pc1_variance = pca.explained_variance_ratio_[0] * 100
pc2_variance = pca.explained_variance_ratio_[1] * 100
print(f"PC1 Variance: {pc1_variance:.2f}%")
print(f"PC2 Variance: {pc2_variance:.2f}%")

output_file = "pca_results_with_features_fish.csv"
with open(output_file, mode="w", newline="") as file:
    writer = csv.writer(file)
    writer.writerow(["Sequence_Index", "PC1", "PC2", "Cluster"])
    for i, (pc1, pc2, cluster) in enumerate(zip(embedded_sequences_pca[:, 0], embedded_sequences_pca[:, 1], clusters)):
        writer.writerow([i + 1, pc1, pc2, cluster])

plt.figure(figsize=(8, 6))
plt.scatter(embedded_sequences_pca[:, 0], embedded_sequences_pca[:, 1], c=clusters, cmap='viridis', alpha=0.7)
plt.xlabel(f'PC1 ({pc1_variance:.2f}%)')
plt.ylabel(f'PC2 ({pc2_variance:.2f}%)')
plt.title('PCA Visualization of Protein Sequences with Physicochemical Properties')
plt.colorbar(label="Cluster")
plt.show()
